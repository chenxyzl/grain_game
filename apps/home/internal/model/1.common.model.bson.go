// Code generated by https://github.com/chenxyzl/gen_tools; DO NOT EDIT.
// gen_tools version: 1.0.3
// generate time: 2024-06-18 17:54:06
// src code version:
// src code commit time :
package model

import (
	"github.com/chenxyzl/gsgen/gsmodel"
	"go.mongodb.org/mongo-driver/bson"
)

func (s *TItem) MarshalBSON() ([]byte, error) {
	var doc = bson.M{"tid": s.tid, "num": s.num}
	return bson.Marshal(doc)
}
func (s *TItem) UnmarshalBSON(data []byte) error {
	doc := struct {
		Tid int32 `bson:"tid"`
		Num int32 `bson:"num"`
	}{}
	if err := bson.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetTid(doc.Tid)
	s.SetNum(doc.Num)
	return nil
}
func (s *TItem) BuildBson(m bson.M, preKey string) {
	dirty := s.GetDirty()
	if dirty == 0 {
		return
	}
	if dirty&(1<<0) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("tid", preKey), s.tid)
	}
	if dirty&(1<<1) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("num", preKey), s.num)
	}
	return
}
func (s *TItem) CleanDirty() {
	s.DirtyModel.CleanDirty()
}
func (s *UItem) MarshalBSON() ([]byte, error) {
	var doc = bson.M{"uid": s.uid, "num": s.num}
	return bson.Marshal(doc)
}
func (s *UItem) UnmarshalBSON(data []byte) error {
	doc := struct {
		Uid uint64 `bson:"uid"`
		Num int32  `bson:"num"`
	}{}
	if err := bson.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetUid(doc.Uid)
	s.SetNum(doc.Num)
	return nil
}
func (s *UItem) BuildBson(m bson.M, preKey string) {
	dirty := s.GetDirty()
	if dirty == 0 {
		return
	}
	if dirty&(1<<0) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("uid", preKey), s.uid)
	}
	if dirty&(1<<1) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("num", preKey), s.num)
	}
	return
}
func (s *UItem) CleanDirty() {
	s.DirtyModel.CleanDirty()
}
func (s *AItem) MarshalBSON() ([]byte, error) {
	var doc = bson.M{"uid": s.uid, "tid": s.tid, "num": s.num, "create_time_unix": s.createTimeUnix}
	return bson.Marshal(doc)
}
func (s *AItem) UnmarshalBSON(data []byte) error {
	doc := struct {
		Uid            uint64 `bson:"uid"`
		Tid            int32  `bson:"tid"`
		Num            int64  `bson:"num"`
		Createtimeunix int64  `bson:"create_time_unix"`
	}{}
	if err := bson.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetUid(doc.Uid)
	s.SetTid(doc.Tid)
	s.SetNum(doc.Num)
	s.SetCreatetimeunix(doc.Createtimeunix)
	return nil
}
func (s *AItem) BuildBson(m bson.M, preKey string) {
	dirty := s.GetDirty()
	if dirty == 0 {
		return
	}
	if dirty&(1<<0) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("uid", preKey), s.uid)
	}
	if dirty&(1<<1) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("tid", preKey), s.tid)
	}
	if dirty&(1<<2) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("num", preKey), s.num)
	}
	if dirty&(1<<3) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("create_time_unix", preKey), s.createTimeUnix)
	}
	return
}
func (s *AItem) CleanDirty() {
	s.DirtyModel.CleanDirty()
}
