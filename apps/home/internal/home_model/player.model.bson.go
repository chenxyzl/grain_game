// Code generated by https://github.com/chenxyzl/gsgen; DO NOT EDIT.
// gen_tools version: 1.1.5
// generate time: 2024-06-24 14:29:32
package home_model

import (
	"github.com/chenxyzl/gsgen/gsmodel"
	"go.mongodb.org/mongo-driver/bson"
)

func (s *Player) MarshalBSON() ([]byte, error) {
	var doc = bson.M{"_id": s.uid, "base": s.base, "game": s.game}
	return bson.Marshal(doc)
}
func (s *Player) UnmarshalBSON(data []byte) error {
	doc := struct {
		Uid  uint64 `bson:"_id"`
		Base *Base  `bson:"base"`
		Game *Game  `bson:"game"`
	}{}
	if err := bson.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetUid(doc.Uid)
	s.SetBase(doc.Base)
	s.SetGame(doc.Game)
	return nil
}
func (s *Player) BuildBson(m bson.M, preKey string) {
	dirty := s.GetDirty()
	if dirty == 0 {
		return
	}
	if dirty&(1<<0) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("_id", preKey), s.uid)
	}
	if dirty&(1<<1) != 0 {
		if s.base == nil {
			gsmodel.AddUnsetDirtyM(m, gsmodel.MakeBsonKey("base", preKey))
		} else {
			s.base.BuildBson(m, gsmodel.MakeBsonKey("base", preKey))
		}
	}
	if dirty&(1<<2) != 0 {
		if s.game == nil {
			gsmodel.AddUnsetDirtyM(m, gsmodel.MakeBsonKey("game", preKey))
		} else {
			s.game.BuildBson(m, gsmodel.MakeBsonKey("game", preKey))
		}
	}
	return
}
func (s *Player) CleanDirty() {
	s.DirtyModel.CleanDirty()
	if s.base != nil {
		s.base.CleanDirty()
	}
	if s.game != nil {
		s.game.CleanDirty()
	}
}
