// Code generated by https://github.com/chenxyzl/gsgen; DO NOT EDIT.
// gen_tools version: 1.1.5
// generate time: 2024-06-26 10:48:22
package home_model

import (
	"github.com/chenxyzl/gsgen/gsmodel"
	"go.mongodb.org/mongo-driver/bson"
	"grain_game/apps/shared/common_model"
)

func (s *Game) MarshalBSON() ([]byte, error) {
	var doc = bson.M{"bag": s.bag, "mailbox": s.mailbox}
	return bson.Marshal(doc)
}
func (s *Game) UnmarshalBSON(data []byte) error {
	doc := struct {
		Bag     *Bag     `bson:"bag"`
		Mailbox *Mailbox `bson:"mailbox"`
	}{}
	if err := bson.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetBag(doc.Bag)
	s.SetMailbox(doc.Mailbox)
	return nil
}
func (s *Game) BuildBson(m bson.M, preKey string) {
	dirty := s.GetDirty()
	if dirty == 0 {
		return
	}
	if dirty&(1<<0) != 0 {
		if s.bag == nil {
			gsmodel.AddUnsetDirtyM(m, gsmodel.MakeBsonKey("bag", preKey))
		} else {
			s.bag.BuildBson(m, gsmodel.MakeBsonKey("bag", preKey))
		}
	}
	if dirty&(1<<1) != 0 {
		if s.mailbox == nil {
			gsmodel.AddUnsetDirtyM(m, gsmodel.MakeBsonKey("mailbox", preKey))
		} else {
			s.mailbox.BuildBson(m, gsmodel.MakeBsonKey("mailbox", preKey))
		}
	}
	return
}
func (s *Game) CleanDirty() {
	s.DirtyModel.CleanDirty()
	if s.bag != nil {
		s.bag.CleanDirty()
	}
	if s.mailbox != nil {
		s.mailbox.CleanDirty()
	}
}
func (s *Bag) MarshalBSON() ([]byte, error) {
	var doc = bson.M{"items": s.items}
	return bson.Marshal(doc)
}
func (s *Bag) UnmarshalBSON(data []byte) error {
	doc := struct {
		Items *gsmodel.DMap[uint64, *common_model.AItem] `bson:"items"`
	}{}
	if err := bson.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetItems(doc.Items)
	return nil
}
func (s *Bag) BuildBson(m bson.M, preKey string) {
	dirty := s.GetDirty()
	if dirty == 0 {
		return
	}
	if dirty&(1<<0) != 0 {
		if s.items == nil {
			gsmodel.AddUnsetDirtyM(m, gsmodel.MakeBsonKey("items", preKey))
		} else {
			s.items.BuildBson(m, gsmodel.MakeBsonKey("items", preKey))
		}
	}
	return
}
func (s *Bag) CleanDirty() {
	s.DirtyModel.CleanDirty()
	if s.items != nil {
		s.items.CleanDirty()
	}
}
func (s *Mail) MarshalBSON() ([]byte, error) {
	var doc = bson.M{"_id": s.uid, "tid": s.tid, "to_uid": s.toUid, "from_uid": s.fromUid, "from_name": s.fromName, "title": s.title, "content": s.content, "rewards": s.rewards, "params": s.params, "create_time": s.createTime, "read_time": s.readTime, "get_time": s.getTime, "deleted_time": s.deletedTime}
	return bson.Marshal(doc)
}
func (s *Mail) UnmarshalBSON(data []byte) error {
	doc := struct {
		Uid         uint64                              `bson:"_id"`
		Tid         uint64                              `bson:"tid"`
		Touid       uint64                              `bson:"to_uid"`
		Fromuid     uint64                              `bson:"from_uid"`
		Fromname    string                              `bson:"from_name"`
		Title       string                              `bson:"title"`
		Content     string                              `bson:"content"`
		Rewards     *gsmodel.DList[*common_model.AItem] `bson:"rewards"`
		Params      *gsmodel.DMap[string, string]       `bson:"params"`
		Createtime  int64                               `bson:"create_time"`
		Readtime    bool                                `bson:"read_time"`
		Gettime     bool                                `bson:"get_time"`
		Deletedtime bool                                `bson:"deleted_time"`
	}{}
	if err := bson.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetUid(doc.Uid)
	s.SetTid(doc.Tid)
	s.SetTouid(doc.Touid)
	s.SetFromuid(doc.Fromuid)
	s.SetFromname(doc.Fromname)
	s.SetTitle(doc.Title)
	s.SetContent(doc.Content)
	s.SetRewards(doc.Rewards)
	s.SetParams(doc.Params)
	s.SetCreatetime(doc.Createtime)
	s.SetReadtime(doc.Readtime)
	s.SetGettime(doc.Gettime)
	s.SetDeletedtime(doc.Deletedtime)
	return nil
}
func (s *Mail) BuildBson(m bson.M, preKey string) {
	dirty := s.GetDirty()
	if dirty == 0 {
		return
	}
	if dirty&(1<<0) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("_id", preKey), s.uid)
	}
	if dirty&(1<<1) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("tid", preKey), s.tid)
	}
	if dirty&(1<<2) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("to_uid", preKey), s.toUid)
	}
	if dirty&(1<<3) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("from_uid", preKey), s.fromUid)
	}
	if dirty&(1<<4) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("from_name", preKey), s.fromName)
	}
	if dirty&(1<<5) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("title", preKey), s.title)
	}
	if dirty&(1<<6) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("content", preKey), s.content)
	}
	if dirty&(1<<7) != 0 {
		if s.rewards == nil {
			gsmodel.AddUnsetDirtyM(m, gsmodel.MakeBsonKey("rewards", preKey))
		} else {
			s.rewards.BuildBson(m, gsmodel.MakeBsonKey("rewards", preKey))
		}
	}
	if dirty&(1<<8) != 0 {
		if s.params == nil {
			gsmodel.AddUnsetDirtyM(m, gsmodel.MakeBsonKey("params", preKey))
		} else {
			s.params.BuildBson(m, gsmodel.MakeBsonKey("params", preKey))
		}
	}
	if dirty&(1<<9) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("create_time", preKey), s.createTime)
	}
	if dirty&(1<<10) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("read_time", preKey), s.readTime)
	}
	if dirty&(1<<11) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("get_time", preKey), s.getTime)
	}
	if dirty&(1<<12) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("deleted_time", preKey), s.deletedTime)
	}
	return
}
func (s *Mail) CleanDirty() {
	s.DirtyModel.CleanDirty()
	if s.rewards != nil {
		s.rewards.CleanDirty()
	}
	if s.params != nil {
		s.params.CleanDirty()
	}
}
func (s *Mailbox) MarshalBSON() ([]byte, error) {
	var doc = bson.M{"mail_ids": s.mailIds, "last_global_mail_time": s.lastGlobalMailTime}
	return bson.Marshal(doc)
}
func (s *Mailbox) UnmarshalBSON(data []byte) error {
	doc := struct {
		Mailids            *gsmodel.DList[uint64] `bson:"mail_ids"`
		Lastglobalmailtime uint64                 `bson:"last_global_mail_time"`
	}{}
	if err := bson.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetMailids(doc.Mailids)
	s.SetLastglobalmailtime(doc.Lastglobalmailtime)
	return nil
}
func (s *Mailbox) BuildBson(m bson.M, preKey string) {
	dirty := s.GetDirty()
	if dirty == 0 {
		return
	}
	if dirty&(1<<0) != 0 {
		if s.mailIds == nil {
			gsmodel.AddUnsetDirtyM(m, gsmodel.MakeBsonKey("mail_ids", preKey))
		} else {
			s.mailIds.BuildBson(m, gsmodel.MakeBsonKey("mail_ids", preKey))
		}
	}
	if dirty&(1<<1) != 0 {
		gsmodel.AddSetDirtyM(m, gsmodel.MakeBsonKey("last_global_mail_time", preKey), s.lastGlobalMailTime)
	}
	return
}
func (s *Mailbox) CleanDirty() {
	s.DirtyModel.CleanDirty()
	if s.mailIds != nil {
		s.mailIds.CleanDirty()
	}
}
