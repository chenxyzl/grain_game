// Code generated by https://github.com/chenxyzl/gsgen; DO NOT EDIT.
// gen_tools version: 1.1.5
// generate time: 2024-06-28 17:34:39
package common_model

import (
	"encoding/json"
	"fmt"
)

func (s *Item) GetTid() int32 {
	return s.tid
}
func (s *Item) SetTid(v int32) {
	s.tid = v
	s.UpdateDirty(1 << 0)
}
func (s *Item) GetNum() int32 {
	return s.num
}
func (s *Item) SetNum(v int32) {
	s.num = v
	s.UpdateDirty(1 << 1)
}
func (s *Item) String() string {
	doc := struct {
		Tid int32 `bson:"tid"`
		Num int32 `bson:"num"`
	}{s.tid, s.num}
	return fmt.Sprintf("%v", &doc)
}
func (s *Item) MarshalJSON() ([]byte, error) {
	doc := struct {
		Tid int32 `bson:"tid"`
		Num int32 `bson:"num"`
	}{s.tid, s.num}
	return json.Marshal(doc)
}
func (s *Item) UnmarshalJSON(data []byte) error {
	doc := struct {
		Tid int32 `bson:"tid"`
		Num int32 `bson:"num"`
	}{}
	if err := json.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetTid(doc.Tid)
	s.SetNum(doc.Num)
	return nil
}
func (s *Item) Clone() (*Item, error) {
	data, err := json.Marshal(s)
	if err != nil {
		return nil, err
	}
	ret := Item{}
	err = json.Unmarshal(data, &ret)
	if err != nil {
		return nil, err
	}
	return &ret, nil
}
func (s *UItem) GetUid() uint64 {
	return s.uid
}
func (s *UItem) SetUid(v uint64) {
	s.uid = v
	s.UpdateDirty(1 << 0)
}
func (s *UItem) GetNum() int32 {
	return s.num
}
func (s *UItem) SetNum(v int32) {
	s.num = v
	s.UpdateDirty(1 << 1)
}
func (s *UItem) String() string {
	doc := struct {
		Uid uint64 `bson:"uid"`
		Num int32  `bson:"num"`
	}{s.uid, s.num}
	return fmt.Sprintf("%v", &doc)
}
func (s *UItem) MarshalJSON() ([]byte, error) {
	doc := struct {
		Uid uint64 `bson:"uid"`
		Num int32  `bson:"num"`
	}{s.uid, s.num}
	return json.Marshal(doc)
}
func (s *UItem) UnmarshalJSON(data []byte) error {
	doc := struct {
		Uid uint64 `bson:"uid"`
		Num int32  `bson:"num"`
	}{}
	if err := json.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetUid(doc.Uid)
	s.SetNum(doc.Num)
	return nil
}
func (s *UItem) Clone() (*UItem, error) {
	data, err := json.Marshal(s)
	if err != nil {
		return nil, err
	}
	ret := UItem{}
	err = json.Unmarshal(data, &ret)
	if err != nil {
		return nil, err
	}
	return &ret, nil
}
func (s *BItem) GetUid() uint64 {
	return s.uid
}
func (s *BItem) SetUid(v uint64) {
	s.uid = v
	s.UpdateDirty(1 << 0)
}
func (s *BItem) GetTid() int32 {
	return s.tid
}
func (s *BItem) SetTid(v int32) {
	s.tid = v
	s.UpdateDirty(1 << 1)
}
func (s *BItem) GetNum() int64 {
	return s.num
}
func (s *BItem) SetNum(v int64) {
	s.num = v
	s.UpdateDirty(1 << 2)
}
func (s *BItem) GetCreatetimeunix() int64 {
	return s.createTimeUnix
}
func (s *BItem) SetCreatetimeunix(v int64) {
	s.createTimeUnix = v
	s.UpdateDirty(1 << 3)
}
func (s *BItem) String() string {
	doc := struct {
		Uid            uint64 `bson:"uid"`
		Tid            int32  `bson:"tid"`
		Num            int64  `bson:"num"`
		Createtimeunix int64  `bson:"create_time_unix"`
	}{s.uid, s.tid, s.num, s.createTimeUnix}
	return fmt.Sprintf("%v", &doc)
}
func (s *BItem) MarshalJSON() ([]byte, error) {
	doc := struct {
		Uid            uint64 `bson:"uid"`
		Tid            int32  `bson:"tid"`
		Num            int64  `bson:"num"`
		Createtimeunix int64  `bson:"create_time_unix"`
	}{s.uid, s.tid, s.num, s.createTimeUnix}
	return json.Marshal(doc)
}
func (s *BItem) UnmarshalJSON(data []byte) error {
	doc := struct {
		Uid            uint64 `bson:"uid"`
		Tid            int32  `bson:"tid"`
		Num            int64  `bson:"num"`
		Createtimeunix int64  `bson:"create_time_unix"`
	}{}
	if err := json.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.SetUid(doc.Uid)
	s.SetTid(doc.Tid)
	s.SetNum(doc.Num)
	s.SetCreatetimeunix(doc.Createtimeunix)
	return nil
}
func (s *BItem) Clone() (*BItem, error) {
	data, err := json.Marshal(s)
	if err != nil {
		return nil, err
	}
	ret := BItem{}
	err = json.Unmarshal(data, &ret)
	if err != nil {
		return nil, err
	}
	return &ret, nil
}
