// Code generated by https://github.com/chenxyzl/gsgen; DO NOT EDIT.
// gen_tools version: 1.1.5
// generate time: 2024-06-26 10:48:26
package config

import (
	"encoding/json"
	"fmt"
	"github.com/chenxyzl/gsgen/gsmodel"
)

func (s *Gate) GetWspath() string {
	return s.wsPath
}
func (s *Gate) setWspath(v string) {
	s.wsPath = v
}
func (s *Gate) GetWssubkey() string {
	return s.wsSubKey
}
func (s *Gate) setWssubkey(v string) {
	s.wsSubKey = v
}
func (s *Gate) String() string {
	doc := struct {
		Wspath   string `json:"wsPath"`
		Wssubkey string `json:"wsSubKey"`
	}{s.wsPath, s.wsSubKey}
	return fmt.Sprintf("%v", &doc)
}
func (s *Gate) MarshalJSON() ([]byte, error) {
	doc := struct {
		Wspath   string `json:"wsPath"`
		Wssubkey string `json:"wsSubKey"`
	}{s.wsPath, s.wsSubKey}
	return json.Marshal(doc)
}
func (s *Gate) UnmarshalJSON(data []byte) error {
	doc := struct {
		Wspath   string `json:"wsPath"`
		Wssubkey string `json:"wsSubKey"`
	}{}
	if err := json.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.setWspath(doc.Wspath)
	s.setWssubkey(doc.Wssubkey)
	return nil
}
func (s *Gate) Clone() (*Gate, error) {
	data, err := json.Marshal(s)
	if err != nil {
		return nil, err
	}
	ret := Gate{}
	err = json.Unmarshal(data, &ret)
	if err != nil {
		return nil, err
	}
	return &ret, nil
}
func (s *Config) GetApp() string {
	return s.app
}
func (s *Config) setApp(v string) {
	s.app = v
}
func (s *Config) GetVersion() string {
	return s.version
}
func (s *Config) setVersion(v string) {
	s.version = v
}
func (s *Config) GetEtcd() *gsmodel.AList[string] {
	return s.etcd
}
func (s *Config) setEtcd(v *gsmodel.AList[string]) {
	s.etcd = v
}
func (s *Config) GetGate() *Gate {
	return s.gate
}
func (s *Config) setGate(v *Gate) {
	s.gate = v
}
func (s *Config) String() string {
	doc := struct {
		App     string                 `toml:"app"`
		Version string                 `json:"version"`
		Etcd    *gsmodel.AList[string] `json:"etcd"`
		Gate    *Gate                  `json:"gate"`
	}{s.app, s.version, s.etcd, s.gate}
	return fmt.Sprintf("%v", &doc)
}
func (s *Config) MarshalJSON() ([]byte, error) {
	doc := struct {
		App     string                 `toml:"app"`
		Version string                 `json:"version"`
		Etcd    *gsmodel.AList[string] `json:"etcd"`
		Gate    *Gate                  `json:"gate"`
	}{s.app, s.version, s.etcd, s.gate}
	return json.Marshal(doc)
}
func (s *Config) UnmarshalJSON(data []byte) error {
	doc := struct {
		App     string                 `toml:"app"`
		Version string                 `json:"version"`
		Etcd    *gsmodel.AList[string] `json:"etcd"`
		Gate    *Gate                  `json:"gate"`
	}{}
	if err := json.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.setApp(doc.App)
	s.setVersion(doc.Version)
	s.setEtcd(doc.Etcd)
	s.setGate(doc.Gate)
	return nil
}
func (s *Config) Clone() (*Config, error) {
	data, err := json.Marshal(s)
	if err != nil {
		return nil, err
	}
	ret := Config{}
	err = json.Unmarshal(data, &ret)
	if err != nil {
		return nil, err
	}
	return &ret, nil
}
