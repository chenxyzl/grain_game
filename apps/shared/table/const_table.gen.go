// Code generated by https://github.com/chenxyzl/gsgen; DO NOT EDIT.
// gen_tools version: 1.1.9
// generate time: 2024-07-03 16:09:42
package table

import (
	"encoding/json"
	"fmt"
	"github.com/chenxyzl/gsgen/gsmodel"
)

func (s *ConstElem) GetTestInt() int32 {
	return s.testInt
}
func (s *ConstElem) setTestInt(v int32) {
	s.testInt = v
}
func (s *ConstElem) GetTestStr() int32 {
	return s.testStr
}
func (s *ConstElem) setTestStr(v int32) {
	s.testStr = v
}
func (s *ConstElem) GetTestIntSlice() *gsmodel.AList[int32] {
	return s.testIntSlice
}
func (s *ConstElem) setTestIntSlice(v *gsmodel.AList[int32]) {
	s.testIntSlice = v
}
func (s *ConstElem) GetTestStrSlice() *gsmodel.AList[int32] {
	return s.testStrSlice
}
func (s *ConstElem) setTestStrSlice(v *gsmodel.AList[int32]) {
	s.testStrSlice = v
}
func (s *ConstElem) GetTestMap() *gsmodel.AMap[int32, int32] {
	return s.testMap
}
func (s *ConstElem) setTestMap(v *gsmodel.AMap[int32, int32]) {
	s.testMap = v
}
func (s *ConstElem) GetTestMapWithType() *gsmodel.AMap[int32, *Item] {
	return s.testMapWithType
}
func (s *ConstElem) setTestMapWithType(v *gsmodel.AMap[int32, *Item]) {
	s.testMapWithType = v
}
func (s *ConstElem) String() string {
	doc := struct {
		TestInt         int32                       `json:"test"`
		TestStr         int32                       `json:"test_str"`
		TestIntSlice    *gsmodel.AList[int32]       `json:"test_int_slice"`
		TestStrSlice    *gsmodel.AList[int32]       `json:"test_string_slice"`
		TestMap         *gsmodel.AMap[int32, int32] `json:"test_map"`
		TestMapWithType *gsmodel.AMap[int32, *Item] `json:"test_map_with_type"`
	}{s.testInt, s.testStr, s.testIntSlice, s.testStrSlice, s.testMap, s.testMapWithType}
	return fmt.Sprintf("%v", &doc)
}
func (s *ConstElem) MarshalJSON() ([]byte, error) {
	doc := struct {
		TestInt         int32                       `json:"test"`
		TestStr         int32                       `json:"test_str"`
		TestIntSlice    *gsmodel.AList[int32]       `json:"test_int_slice"`
		TestStrSlice    *gsmodel.AList[int32]       `json:"test_string_slice"`
		TestMap         *gsmodel.AMap[int32, int32] `json:"test_map"`
		TestMapWithType *gsmodel.AMap[int32, *Item] `json:"test_map_with_type"`
	}{s.testInt, s.testStr, s.testIntSlice, s.testStrSlice, s.testMap, s.testMapWithType}
	return json.Marshal(doc)
}
func (s *ConstElem) UnmarshalJSON(data []byte) error {
	doc := struct {
		TestInt         int32                       `json:"test"`
		TestStr         int32                       `json:"test_str"`
		TestIntSlice    *gsmodel.AList[int32]       `json:"test_int_slice"`
		TestStrSlice    *gsmodel.AList[int32]       `json:"test_string_slice"`
		TestMap         *gsmodel.AMap[int32, int32] `json:"test_map"`
		TestMapWithType *gsmodel.AMap[int32, *Item] `json:"test_map_with_type"`
	}{}
	if err := json.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.setTestInt(doc.TestInt)
	s.setTestStr(doc.TestStr)
	s.setTestIntSlice(doc.TestIntSlice)
	s.setTestStrSlice(doc.TestStrSlice)
	s.setTestMap(doc.TestMap)
	s.setTestMapWithType(doc.TestMapWithType)
	return nil
}
func (s *ConstElem) Clone() (*ConstElem, error) {
	data, err := json.Marshal(s)
	if err != nil {
		return nil, err
	}
	ret := ConstElem{}
	err = json.Unmarshal(data, &ret)
	if err != nil {
		return nil, err
	}
	return &ret, nil
}
