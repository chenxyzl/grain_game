// Code generated by https://github.com/chenxyzl/gsgen; DO NOT EDIT.
// gen_tools version: 1.1.9
// generate time: 2024-07-03 16:09:42
package table

import (
	"encoding/json"
	"fmt"
	"github.com/chenxyzl/gsgen/gsmodel"
)

func (s *MailElem) GetId() int32 {
	return s.id
}
func (s *MailElem) setId(v int32) {
	s.id = v
}
func (s *MailElem) String() string {
	doc := struct {
		Id int32 `json:"id"`
	}{s.id}
	return fmt.Sprintf("%v", &doc)
}
func (s *MailElem) MarshalJSON() ([]byte, error) {
	doc := struct {
		Id int32 `json:"id"`
	}{s.id}
	return json.Marshal(doc)
}
func (s *MailElem) UnmarshalJSON(data []byte) error {
	doc := struct {
		Id int32 `json:"id"`
	}{}
	if err := json.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.setId(doc.Id)
	return nil
}
func (s *MailElem) Clone() (*MailElem, error) {
	data, err := json.Marshal(s)
	if err != nil {
		return nil, err
	}
	ret := MailElem{}
	err = json.Unmarshal(data, &ret)
	if err != nil {
		return nil, err
	}
	return &ret, nil
}
func (s *MailTable) GetD() *gsmodel.AList[*MailElem] {
	return s.d
}
func (s *MailTable) setD(v *gsmodel.AList[*MailElem]) {
	s.d = v
}
func (s *MailTable) GetM() *gsmodel.AMap[int32, *MailElem] {
	return s.m
}
func (s *MailTable) setM(v *gsmodel.AMap[int32, *MailElem]) {
	s.m = v
}
func (s *MailTable) String() string {
	doc := struct {
		D *gsmodel.AList[*MailElem]
		M *gsmodel.AMap[int32, *MailElem]
	}{s.d, s.m}
	return fmt.Sprintf("%v", &doc)
}
func (s *MailTable) MarshalJSON() ([]byte, error) {
	doc := struct {
		D *gsmodel.AList[*MailElem]
		M *gsmodel.AMap[int32, *MailElem]
	}{s.d, s.m}
	return json.Marshal(doc)
}
func (s *MailTable) UnmarshalJSON(data []byte) error {
	doc := struct {
		D *gsmodel.AList[*MailElem]
		M *gsmodel.AMap[int32, *MailElem]
	}{}
	if err := json.Unmarshal(data, &doc); err != nil {
		return err
	}
	s.setD(doc.D)
	s.setM(doc.M)
	return nil
}
func (s *MailTable) Clone() (*MailTable, error) {
	data, err := json.Marshal(s)
	if err != nil {
		return nil, err
	}
	ret := MailTable{}
	err = json.Unmarshal(data, &ret)
	if err != nil {
		return nil, err
	}
	return &ret, nil
}
